/*! For license information please see bundle.js.LICENSE.txt */
var oodts;(()=>{var e={730:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([e.id,"body {\n}\n\nbutton.OODCoreComponentButton {\n    border: solid 1px;\n    -webkit-appearance: none;\n}\n\nbutton.OODCoreComponentButtonSeamless {\n    border: none;\n    background: none;\n}","",{version:3,sources:["webpack://./src/styles/Button.css"],names:[],mappings:"AAAA;AACA;;AAEA;IACI,iBAAiB;IACjB,wBAAwB;AAC5B;;AAEA;IACI,YAAY;IACZ,gBAAgB;AACpB",sourcesContent:["body {\n}\n\nbutton.OODCoreComponentButton {\n    border: solid 1px;\n    -webkit-appearance: none;\n}\n\nbutton.OODCoreComponentButtonSeamless {\n    border: none;\n    background: none;\n}"],sourceRoot:""}]);const i=c},445:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([e.id,"body {\n}\n\ntable.OODCoreComponentsInfoBox {\n    border: solid black 1px;\n    border-collapse: collapse;\n    width: 270px;\n    max-width: 100%;\n    margin: 10px;\n}\n\n    table.OODCoreComponentsInfoBox.desktop {\n        float: right;\n    }\n\ntr.OODCoreComponentsInfoBox {\n    border-collapse: collapse;\n    display: flex;\n}\n\nth.OODCoreComponentsInfoBox {\n    border-top: solid black 1px;\n    padding: 2px 5px 0px 5px;\n}\n\n    th.OODCoreComponentsInfoBox.header {\n        text-align: left;\n    }\n\ntd.OODCoreComponentsInfoBox {\n    border-top: solid black 1px;\n    padding: 2px 5px 0px 5px;\n    width: 135px;\n}\n\n    td.OODCoreComponentsInfoBox.label {\n    }\n\n    td.OODCoreComponentsInfoBox.value {\n        flex-grow: 1;\n    }","",{version:3,sources:["webpack://./src/styles/InfoBox.css"],names:[],mappings:"AAAA;AACA;;AAEA;IACI,uBAAuB;IACvB,yBAAyB;IACzB,YAAY;IACZ,eAAe;IACf,YAAY;AAChB;;IAEI;QACI,YAAY;IAChB;;AAEJ;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;AAC5B;;IAEI;QACI,gBAAgB;IACpB;;AAEJ;IACI,2BAA2B;IAC3B,wBAAwB;IACxB,YAAY;AAChB;;IAEI;IACA;;IAEA;QACI,YAAY;IAChB",sourcesContent:["body {\n}\n\ntable.OODCoreComponentsInfoBox {\n    border: solid black 1px;\n    border-collapse: collapse;\n    width: 270px;\n    max-width: 100%;\n    margin: 10px;\n}\n\n    table.OODCoreComponentsInfoBox.desktop {\n        float: right;\n    }\n\ntr.OODCoreComponentsInfoBox {\n    border-collapse: collapse;\n    display: flex;\n}\n\nth.OODCoreComponentsInfoBox {\n    border-top: solid black 1px;\n    padding: 2px 5px 0px 5px;\n}\n\n    th.OODCoreComponentsInfoBox.header {\n        text-align: left;\n    }\n\ntd.OODCoreComponentsInfoBox {\n    border-top: solid black 1px;\n    padding: 2px 5px 0px 5px;\n    width: 135px;\n}\n\n    td.OODCoreComponentsInfoBox.label {\n    }\n\n    td.OODCoreComponentsInfoBox.value {\n        flex-grow: 1;\n    }"],sourceRoot:""}]);const i=c},345:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([e.id,"body {\n}\n\n/*input.OODCoreComponentInput {\n    width: 135px;\n}*/\n\nspan.OODCoreComponentInputField {\n    border-style: solid;\n    border-width: 1px;\n    padding: 2px;\n}\n\n.OODCoreComponentInputField input {\n    border: none;\n    -webkit-appearance: none;\n    margin-top: 4px;\n    margin-bottom: 4px;\n}","",{version:3,sources:["webpack://./src/styles/Input.css"],names:[],mappings:"AAAA;AACA;;AAEA;;EAEE;;AAEF;IACI,mBAAmB;IACnB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,wBAAwB;IACxB,eAAe;IACf,kBAAkB;AACtB",sourcesContent:["body {\n}\n\n/*input.OODCoreComponentInput {\n    width: 135px;\n}*/\n\nspan.OODCoreComponentInputField {\n    border-style: solid;\n    border-width: 1px;\n    padding: 2px;\n}\n\n.OODCoreComponentInputField input {\n    border: none;\n    -webkit-appearance: none;\n    margin-top: 4px;\n    margin-bottom: 4px;\n}"],sourceRoot:""}]);const i=c},877:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([e.id,"div.OODCoreComponentsNavBar {\n    background-color: var(--background-color-inverted);\n    color: var(--text-color-inverted);\n}","",{version:3,sources:["webpack://./src/styles/NavBar.css"],names:[],mappings:"AAAA;IACI,kDAAkD;IAClD,iCAAiC;AACrC",sourcesContent:["div.OODCoreComponentsNavBar {\n    background-color: var(--background-color-inverted);\n    color: var(--text-color-inverted);\n}"],sourceRoot:""}]);const i=c},209:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([e.id,':root {\n    --background-color-primary: white;\n    --text-color-primary: black;\n    --background-color-inverted: black;\n    --text-color-inverted: white;\n}\n\n[data-theme="OODCoreStyleThemeLight"] {\n    --background-color-primary: white;\n    --text-color-primary: black;\n    --background-color-inverted: black;\n    --text-color-inverted: white;\n}\n\n[data-theme="OODCoreStyleThemeDark"] {\n    --background-color-primary: black;\n    --text-color-primary: white;\n    --background-color-inverted: white;\n    --text-color-inverted: black;\n}\n\nbody {\n    background-color: var(--background-color-primary);\n    color: var(--text-color-primary)\n}',"",{version:3,sources:["webpack://./src/styles/Themes.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,2BAA2B;IAC3B,kCAAkC;IAClC,4BAA4B;AAChC;;AAEA;IACI,iCAAiC;IACjC,2BAA2B;IAC3B,kCAAkC;IAClC,4BAA4B;AAChC;;AAEA;IACI,iCAAiC;IACjC,2BAA2B;IAC3B,kCAAkC;IAClC,4BAA4B;AAChC;;AAEA;IACI,iDAAiD;IACjD;AACJ",sourcesContent:[':root {\n    --background-color-primary: white;\n    --text-color-primary: black;\n    --background-color-inverted: black;\n    --text-color-inverted: white;\n}\n\n[data-theme="OODCoreStyleThemeLight"] {\n    --background-color-primary: white;\n    --text-color-primary: black;\n    --background-color-inverted: black;\n    --text-color-inverted: white;\n}\n\n[data-theme="OODCoreStyleThemeDark"] {\n    --background-color-primary: black;\n    --text-color-primary: white;\n    --background-color-inverted: white;\n    --text-color-inverted: black;\n}\n\nbody {\n    background-color: var(--background-color-primary);\n    color: var(--text-color-primary)\n}'],sourceRoot:""}]);const i=c},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(c[l]=!0)}for(var u=0;u<e.length;u++){var s=[].concat(e[u]);r&&c[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),n.push(s))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},300:()=>{(()=>{"use strict";var e={d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};e.r(n),e.d(n,{bind:()=>a,curry:()=>r,curryAndBind:()=>o,isMobile:()=>c,isNullOrEmpty:()=>i});var t=function(e,n,t){if(t||2===arguments.length)for(var r,o=0,a=n.length;o<a;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))};function r(e,n){return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return e.apply(void 0,t([n],r,!1))}}function o(e,n,r){return function(){for(var o=[],c=0;c<arguments.length;c++)o[c]=arguments[c];return a(e,n).apply(void 0,t([r],o,!1))}}function a(e,n){return e.bind(n)}function c(){return window.innerWidth<=768}function i(e){return""===e||null==e}})()},408:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),c=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,C={};function y(e,n,t){this.props=e,this.context=n,this.refs=C,this.updater=t||A}function b(){}function v(e,n,t){this.props=e,this.context=n,this.refs=C,this.updater=t||A}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var h=v.prototype=new b;h.constructor=v,m(h,y.prototype),h.isPureReactComponent=!0;var x=Array.isArray,I=Object.prototype.hasOwnProperty,O={current:null},g={key:!0,ref:!0,__self:!0,__source:!0};function B(e,n,r){var o,a={},c=null,i=null;if(null!=n)for(o in void 0!==n.ref&&(i=n.ref),void 0!==n.key&&(c=""+n.key),n)I.call(n,o)&&!g.hasOwnProperty(o)&&(a[o]=n[o]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var u=Array(l),s=0;s<l;s++)u[s]=arguments[s+2];a.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===a[o]&&(a[o]=l[o]);return{$$typeof:t,type:e,key:c,ref:i,props:a,_owner:O.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var E=/\/+/g;function w(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function S(e,n,o,a,c){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var l=!1;if(null===e)l=!0;else switch(i){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return c=c(l=e),e=""===a?"."+w(l,0):a,x(c)?(o="",null!=e&&(o=e.replace(E,"$&/")+"/"),S(c,n,o,"",(function(e){return e}))):null!=c&&(k(c)&&(c=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(c,o+(!c.key||l&&l.key===c.key?"":(""+c.key).replace(E,"$&/")+"/")+e)),n.push(c)),1;if(l=0,a=""===a?".":a+":",x(e))for(var u=0;u<e.length;u++){var s=a+w(i=e[u],u);l+=S(i,n,o,s,c)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),u=0;!(i=e.next()).done;)l+=S(i=i.value,n,o,s=a+w(i,u++),c);else if("object"===i)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function D(e,n,t){if(null==e)return e;var r=[],o=0;return S(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function _(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},T={transition:null},j={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:T,ReactCurrentOwner:O};n.Children={map:D,forEach:function(e,n,t){D(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return D(e,(function(){n++})),n},toArray:function(e){return D(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=y,n.Fragment=o,n.Profiler=c,n.PureComponent=v,n.StrictMode=a,n.Suspense=s,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,c=e.ref,i=e._owner;if(null!=n){if(void 0!==n.ref&&(c=n.ref,i=O.current),void 0!==n.key&&(a=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in n)I.call(n,u)&&!g.hasOwnProperty(u)&&(o[u]=void 0===n[u]&&void 0!==l?l[u]:n[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){l=Array(u);for(var s=0;s<u;s++)l[s]=arguments[s+2];o.children=l}return{$$typeof:t,type:e.type,key:a,ref:c,props:o,_owner:i}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=B,n.createFactory=function(e){var n=B.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:u,render:e}},n.isValidElement=k,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},n.memo=function(e,n){return{$$typeof:p,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=T.transition;T.transition={};try{e()}finally{T.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return N.current.useCallback(e,n)},n.useContext=function(e){return N.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return N.current.useDeferredValue(e)},n.useEffect=function(e,n){return N.current.useEffect(e,n)},n.useId=function(){return N.current.useId()},n.useImperativeHandle=function(e,n,t){return N.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return N.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return N.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return N.current.useMemo(e,n)},n.useReducer=function(e,n,t){return N.current.useReducer(e,n,t)},n.useRef=function(e){return N.current.useRef(e)},n.useState=function(e){return N.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return N.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return N.current.useTransition()},n.version="18.2.0"},294:(e,n,t)=>{"use strict";e.exports=t(408)},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var l=e[i],u=r.base?l[0]+r.base:l[0],s=a[u]||0,p="".concat(u," ").concat(s);a[u]=s+1;var d=t(p),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)n[d].references++,n[d].updater(f);else{var A=o(f,r);r.byIndex=i,n.splice(i,0,{identifier:p,updater:A,references:1})}c.push(p)}return c}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=t(a[c]);n[i].references--}for(var l=r(e,o),u=0;u<a.length;u++){var s=t(a[u]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}a=l}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0;var r={};(()=>{"use strict";t.r(r),t.d(r,{Infobox:()=>O,InfoboxLine:()=>R,InfoboxSection:()=>Z,NavBar:()=>M,NavBarButton:()=>Y,NavBarText:()=>F});var e,n=t(294),o=t(300),a=t(379),c=t.n(a),i=t(795),l=t.n(i),u=t(569),s=t.n(u),p=t(565),d=t.n(p),f=t(216),A=t.n(f),m=t(589),C=t.n(m),y=t(445),b={};function v(e,n){return t=e,r=n,(0,o.isNullOrEmpty)(t)?(0,o.isNullOrEmpty)(r)?"":r:(0,o.isNullOrEmpty)(r)?t:t+" "+r;var t,r}b.styleTagTransform=C(),b.setAttributes=d(),b.insert=s().bind(null,"head"),b.domAPI=l(),b.insertStyleElement=A(),c()(y.Z,b),y.Z&&y.Z.locals&&y.Z.locals,function(e){e.Light="OODCoreStyleThemeLight",e.Dark="OODCoreStyleThemeDark"}(e||(e={}));var h=t(730),x={};function I(e){var t="OODCoreComponentButton";t=e.seamless?"OODCoreComponentButtonSeamless "+t:t;var r={};return e.width&&(r.width=e.width),n.createElement("button",{onClick:e.onClick,className:v(t,e.classNames),style:r},e.children)}function O(e){var t=(0,o.isMobile)()?"":" desktop",r=e.classNames+" ";return n.createElement("table",{className:r+t},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{className:"OODCoreComponentsInfoBox title",colSpan:2},e.title))),n.createElement("tbody",null,e.children),n.createElement("tfoot",null,n.createElement("tr",null,n.createElement("td",{colSpan:2},n.createElement(I,{onClick:e.toggleEdit},"Edit")))))}x.styleTagTransform=C(),x.setAttributes=d(),x.insert=s().bind(null,"head"),x.domAPI=l(),x.insertStyleElement=A(),c()(h.Z,x),h.Z&&h.Z.locals&&h.Z.locals;var g=t(345),B={};B.styleTagTransform=C(),B.setAttributes=d(),B.insert=s().bind(null,"head"),B.domAPI=l(),B.insertStyleElement=A(),c()(g.Z,B),g.Z&&g.Z.locals&&g.Z.locals;var k,E=t(209),w={};function S(e){return n.createElement("span",{className:v("OODCoreComponentInputField",e.classNames)},e.children)}function D(e){return!0}function _(e,n){return function(t){var r=t.target.value;r&&(e(r)&&n(r)||t.currentTarget.focus())}}function N(e,n,t){return function(r){var o=r.target.value;o&&(t(o),e(o)&&n(o))}}function T(e,n){return function(t){28===t.keyCode&&e(n)}}function j(e){var t=e.onQuickValidate?e.onQuickValidate:D,r=e.onFullValidate?e.onFullValidate:D,o=e.onValueChange?e.onValueChange:function(e){},a=e.defaultValue?e.defaultValue:"",c=(0,n.useState)(a),i=c[0],l=c[1];return n.createElement(S,null,n.createElement("input",{type:"text",inputMode:"text",value:i,className:"OODCoreComponentTextField",onBlur:_(t,r),onChange:N(t,o,l),onKeyDown:T(l,a)}),e.clearable?n.createElement(I,{seamless:!0,width:"40px"},"Clear"):null)}function R(e){return e.lineType,k.String,n.createElement(j,{defaultValue:e.value}),n.createElement("tr",{className:(e.even,"even")},n.createElement("td",{className:"OODCoreComponentsInfoBox label"},e.label),n.createElement("td",{className:"OODCoreComponentsInfoBox value"},e.editMode?void 0:e.value))}function Z(e){return n.createElement(n.Fragment,null,n.createElement("tr",null,n.createElement("th",{className:"OODCoreComponentsInfoBox header",colSpan:2},e.header)),e.children)}w.styleTagTransform=C(),w.setAttributes=d(),w.insert=s().bind(null,"head"),w.domAPI=l(),w.insertStyleElement=A(),c()(E.Z,w),E.Z&&E.Z.locals&&E.Z.locals,function(e){e[e.String=0]="String"}(k||(k={}));var P=t(877),$={};function M(e){var t=v("OODCoreComponentsNavBar",e.classNames);return n.createElement("div",{className:t},e.children)}function F(e){var t=v("OODCoreComponentsNavBar",e.classNames);return n.createElement("p",{className:t},e.text)}function Y(e){var t=v("OODCoreComponentsNavBar",e.classNames);return n.createElement(I,{classNames:t,onClick:e.onClick},e.children)}$.styleTagTransform=C(),$.setAttributes=d(),$.insert=s().bind(null,"head"),$.domAPI=l(),$.insertStyleElement=A(),c()(P.Z,$),P.Z&&P.Z.locals&&P.Z.locals})(),oodts=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,